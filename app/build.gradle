apply plugin: 'com.android.application'
android {
   ///Android SDK version. Depends on the API/classes/methods used in the Java
   /// code of the Android app.
    compileSdkVersion 15
    ///Android build tools version is not needed anymore: else warning:
    ///"WARNING: The specified Android SDK Build Tools version (25.0.0) is
    /// ignored, as it is below the minimum supported version (28.0.3) for
    /// Android Gradle Plugin 3.4.1.
    /// Android SDK Build Tools 28.0.3 will be used.
    /// To suppress this warning, remove "buildToolsVersion '25.0.0'" from your
    /// build.gradle file, as each version of the Android Gradle Plugin now has
    /// a default version of the build tools."
    //buildToolsVersion "25.0.0"

    defaultConfig {
        applicationId "vtrans.dynlib"
        minSdkVersion 15
        targetSdkVersion 15

        //https://developer.android.com/studio/projects/add-native-code.html
        externalNativeBuild {
            cmake {
                // Passes optional arguments to CMake.
                arguments "-DANDROID_ARM_NEON=TRUE", "-DEXE_TYPE:STRING=Android",
                //"-DUSE_TRANSLATION_RULES",
                //"-DCOMMON_SOURCECODE_ROOT_PATH=C:/Users/Stefan/SourceCodeManagement/VTransdroid/app/src/main/jni/common_sourcecode",
                //"-DCOMMON_SOURCECODE_ROOT_PATH=/media/sg/devel1/SourceCodeManagement/VTransdroid/app/src/main/jni/common_sourcecode",
                //https://docs.gradle.org/current/userguide/writing_build_scripts.html:
                // "projectDir: The directory containing the build script."
                "-DCOMMON_SOURCECODE_ROOT_PATH=${projectDir.getAbsolutePath()}/src/main/jni/common_sourcecode",
            ///Alternative: used soft linked path here as for
            /// "COMMON_SOURCECODE_ROOT_PATH".
                "-DMINI_XML_ROOT_DIR=/media/sg/devel1/mxml-2.12"
                // Sets optional flags for the C compiler.
                //cFlags "-fexceptions", "-frtti"
                //Needed for initializer list for array of struct with constructor
                cppFlags "-std=c++11"
                cppFlags.removeAll("")
            }
            // or ndkBuild {...}
        }
        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your APK.
            abiFilters 'x86', 'armeabi-v7a'
        }
    }

  //http://google.github.io/android-gradle-dsl/current/com.android.build.gradle.api.AndroidSourceSet.html
  /** https://developer.android.com/studio/build :
   * "Android Studio logically groups source code and resources for each module
   * into source sets. A moduleâ€™s main/ source set includes the code and
   * resources used by all its build variants." */
  sourceSets {
    //https://developer.android.com/studio/projects
    /** https://developer.android.com/studio/build :
     * "This source set includes code and resources common to all build
     * variants." */
    main {
        manifest.srcFile 'src/main/AndroidManifest.xml'
      //java.srcDirs = ['src']
      jni.srcDirs = ['src/main/jni']
      /** If uncommenting includes the whole "src" folder (all native (C, C++)
       * source files etc.) into the apk file.*/
      //resources.srcDirs = ['src']
      //aidl.srcDirs = ['src']
      //renderscript.srcDirs = ['src']
        res.srcDirs = ['src/main/res']
        assets.srcDirs = ['assets']
        //https://stackoverflow.com/questions/16705954/adding-a-so-file-in-android-studio
        // It must have a subdirectory like "armeabi-v7a" where the dynamic library resides
        jniLibs.srcDirs = ['libs']

      //from https://stackoverflow.com/questions/44775001/how-to-remove-unused-items-from-android-apps-all-file
      //exclude {'**/jni/*'}
    }
  }

  buildTypes {
    //https://www.vogella.com/tutorials/AndroidBuild/article.html#building_gradle_minify
    release {
      minifyEnabled false
      //shrinkResources true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
    }
    ///https://developer.android.com/studio/debug
    debug {
        jniDebuggable true
      debuggable true
    }
  }


    externalNativeBuild {
        cmake {
            //Make a soft link from VTrans3 source folder to "app/src/main/jni/VTrans3_src"
            path "src/main/jni/VTrans3_src/CMakeLists.txt"
        }
    }

  //https://stackoverflow.com/questions/50739996/lint-found-fatal-errors-while-assembling-a-release-target/51363161
  lintOptions {
    checkReleaseBuilds false
    // Or, if you prefer, you can continue to check for errors in release builds,
    // but continue the build even when errors are found:
    abortOnError false
  }
}

dependencies {
}
